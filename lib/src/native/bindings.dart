// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// llama.cpp binding
class llama {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  llama(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  llama.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<ffi.Char> llama_default_params() {
    return _llama_default_params();
  }

  late final _llama_default_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
    'llama_default_params',
  );
  late final _llama_default_params =
      _llama_default_paramsPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int llama_llm_init(ffi.Pointer<ffi.Char> params) {
    return _llama_llm_init(params);
  }

  late final _llama_llm_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
    'llama_llm_init',
  );
  late final _llama_llm_init =
      _llama_llm_initPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int llama_prompt(
    ffi.Pointer<ffi.Char> messages,
    ffi.Pointer<dart_output> output,
  ) {
    return _llama_prompt(messages, output);
  }

  late final _llama_promptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<dart_output>)>>('llama_prompt');
  late final _llama_prompt = _llama_promptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<dart_output>)>();

  void llama_llm_stop() {
    return _llama_llm_stop();
  }

  late final _llama_llm_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('llama_llm_stop');
  late final _llama_llm_stop = _llama_llm_stopPtr.asFunction<void Function()>();

  void llama_llm_free() {
    return _llama_llm_free();
  }

  late final _llama_llm_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('llama_llm_free');
  late final _llama_llm_free = _llama_llm_freePtr.asFunction<void Function()>();

  // New embedding functions
  ffi.Pointer<ffi.Float> llama_get_embedding(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> embedding_size,
  ) {
    return _llama_get_embedding(text, embedding_size);
  }

  late final _llama_get_embeddingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('llama_get_embedding');
  late final _llama_get_embedding = _llama_get_embeddingPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void llama_free_embedding(ffi.Pointer<ffi.Float> embedding) {
    return _llama_free_embedding(embedding);
  }

  late final _llama_free_embeddingPtr = _lookup<
      ffi.NativeFunction<void Function(ffi.Pointer<ffi.Float>)>>(
    'llama_free_embedding',
  );
  late final _llama_free_embedding = _llama_free_embeddingPtr
      .asFunction<void Function(ffi.Pointer<ffi.Float>)>();
}

typedef dart_output
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char> buffer)>;
